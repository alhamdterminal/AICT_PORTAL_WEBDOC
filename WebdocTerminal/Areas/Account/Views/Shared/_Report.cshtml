@model DevExpress.XtraReports.UI.XtraReport
<script src="https://cdn.jsdelivr.net/npm/jsprintmanager@5.0.4/JSPrintManager.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.5/bluebird.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>


<script>
    function InitDevExWebDocumentViewer(s, e) {

        e.Actions[7].zoom(1.5);

        //e.Actions[11].visible = false;
          
        //console.log("e.Actions", e.Actions[12].items)

        //console.log("DevExpress", DevExpress)
        //console.log("DevExpress", DevExpress.Report)
        //console.log("DevExpress", DevExpress.Report.Preview)
        //console.log("DevExpress", DevExpress.Reporting.Viewer.ExportFormatID.XLS)
        //console.log("DevExpress", DevExpress.Reporting.Export)

        //var res = DevExpress.Reporting.Export.CsvExportOptions
        //console.log("res",res)
        //res.subscribe(function (x, a) {
        //        console.log("x", x);
        //        console.log("a", a);
        //     });
    }

    function CustomizeExportOptions(s, e) {
        //console.log("s", s);
        //console.log("e", e);
        //console.log("e", e._options.exportOptions.html);

        //event.args.HideExportOptionsPanel();
        //var model = event._options.exportOptions(ExportFormatID.XLSX);
        //// Encrypt the file. Encryption is performed in asynchronous mode.
        ////model.encryptionOptions.password("1234");
        //model.documentOptions.author("Me");

        // console.log("eee", e._options.exportOptions.pdf);
        // console.log("sss", s._previewModel);
        //console.log("sss", e.GetExportOptionsModel(DevExpress.Reporting.Viewer.ExportFormatID.XLS));

        //var model = e.GetExportOptionsModel(DevExpress.Reporting.Viewer.ExportFormatID.XLS);
        //model.xlsExportMode("SingleFilePageByPage");
    }

    function asad(a, b) {
        //console.log("a", a);
        // //a.previewModel.Print();
        //console.log("b", b);

        //var asda = a;
        //console.log("asda", a.asda);

        //console.log( b.GetById('dxrd-preview-toolbar-scrollable'))
        //console.log(b.GetById('dxrdp-surface'))
        //console.log(b.GetById('dxrd-right-panel-template-base'))
    }

    function onBeforeRender(s, e) {
        //console.log("Eeeeeeeeeeee",e)

        //var pages = e.reportPreview.pages;

        //console.log("pages", pages)
        ////Subscribe to property change.

    }
    var pagesSubscription;

    function ConfigureBeforeRender(s, e) {
        //AsyncExportApproach(true);
        //AsyncExportApproach(true);
        console.log("Eeeeeeaddsdaeeeeee", s)
        console.log("asdasd", e)

        var pages = e.reportPreview.pages;
        //Subscribe to property change.
        pagesSubscription = pages.subscribe(function (newValue) {
            if (newValue.length > 0) {




                console.log("newValue", newValue);
                //$("#loader").dialog("close");
                ////Stop tracking changes.
                //pagesSubscription.dispose();
            }
        });

        console.log("pagesSubscription", pagesSubscription);

        e.ExportTo(pagesSubscription, true)
        //e.Print(pagesSubscription);


    }



    function directprint(s, e) {
        console.log(s)
        console.log(e)
        console.log(DocumentViewer)
        DocumentViewer.print();
    }

</script>

@Html.DevExpress().WebDocumentViewer("DocumentViewer").Height("900px").Bind(Model).ClientSideEvents(x => { x.CustomizeMenuActions("InitDevExWebDocumentViewer"); x.CustomizeExportOptions("CustomizeExportOptions"); x.CustomizeElements("asad");  x.BeforeRender("ConfigureBeforeRender");  })

@*@Html.DevExpress().Button(settings =>{ settings.Name = "dxPrintButton"; settings.Text = "Print Document"; settings.ClientSideEvents.Click = "PrintOnClick";})

@Html.DevExpress().WebDocumentViewer(ad => { ad.Name = "WebDocumentViewer1"; } ).Bind(Model);*@

@*<div class="row">
    <div class="col-lg-10 col-md-10 col-sm-2 col-xs-12 pad">
        <label class="checkbox">
            <input type="checkbox" id="useDefaultPrinter" /> <strong>Print to Default printer</strong>
        </label>
        <div id="installedPrinters">
            <label for="installedPrinterName">Select an installed Printer:</label>
            <select name="installedPrinterName" id="installedPrinterName"></select>
        </div>
    </div>

    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12 pad">
        <button type="button" class="btn btn-dark" onclick="directprint();" tyle="float: right;">Print Now...</button>
    </div>

</div>
<script>

    //WebSocket settings
    JSPM.JSPrintManager.auto_reconnect = true;
    JSPM.JSPrintManager.start();
    JSPM.JSPrintManager.WS.onStatusChanged = function () {
        if (jspmWSStatus()) {
            //get client installed printers
            JSPM.JSPrintManager.getPrinters().then(function (myPrinters) {

                console.log("myPrinters", myPrinters)
                var options = '';
                for (var i = 0; i < myPrinters.length; i++) {
                    options += '<option>' + myPrinters[i] + '</option>';
                }
                $('#installedPrinterName').html(options);
            });
        }
    };

    //Check JSPM WebSocket status
    function jspmWSStatus() {
        if (JSPM.JSPrintManager.websocket_status == JSPM.WSStatus.Open)
            return true;
        else if (JSPM.JSPrintManager.websocket_status == JSPM.WSStatus.Closed) {
            alert('JSPrintManager (JSPM) is not installed or not running! Download JSPM Client App from https://neodynamic.com/downloads/jspm');
            return false;
        }
        else if (JSPM.JSPrintManager.websocket_status == JSPM.WSStatus.Blocked) {
            alert('JSPM has blocked this website!');
            return false;
        }
    }

    //Do printing...
    function print(o) {

        console.log("pagesSubscription", pagesSubscription);


        if (jspmWSStatus()) {



            //generate an image of HTML content through html2canvas utility
            html2canvas(document.getElementsByClassName('dxrd-report-preview-content-loading-wrapper'), { scale: 5 }).then(function (canvas) {


                //console.log("canvas", canvas)
                ////Create a ClientPrintJob
                //var cpj = new JSPM.ClientPrintJob();
                ////Set Printer type (Refer to the help, there many of them!)
                //if ($('#useDefaultPrinter').prop('checked')) {
                //    cpj.clientPrinter = new JSPM.DefaultPrinter();
                //} else {
                //    cpj.clientPrinter = new JSPM.InstalledPrinter($('#installedPrinterName').val());
                //}
                ////Set content to print...
                //var b64Prefix = "data:image/png;base64,";
                //var imgBase64DataUri = canvas.toDataURL("image/png");
                //var imgBase64Content = imgBase64DataUri.substring(b64Prefix.length, imgBase64DataUri.length);

                //var myImageFile = new JSPM.PrintFile(imgBase64Content, JSPM.FileSourceType.Base64, 'myFileToPrint.png', 1);
                //add file to print job
                cpj.files.push(myImageFile);

                //Send print job to printer!
                cpj.sendToClient();

            });
        }

    }
</script>*@
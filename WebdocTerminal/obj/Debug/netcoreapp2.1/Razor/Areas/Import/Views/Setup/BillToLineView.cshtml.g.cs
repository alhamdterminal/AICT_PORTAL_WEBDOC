#pragma checksum "D:\AICTMAIN_WEBDOCTERMINAL\AICT_DECRYPTED\AICT-Source\WebdocTerminal\Areas\Import\Views\Setup\BillToLineView.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "f2ca61a9e5c08df5eae43eaa6a84c41200ec45617e5a64fc46095d9d023609da"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Import_Views_Setup_BillToLineView), @"mvc.1.0.view", @"/Areas/Import/Views/Setup/BillToLineView.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Import/Views/Setup/BillToLineView.cshtml", typeof(AspNetCore.Areas_Import_Views_Setup_BillToLineView))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\AICTMAIN_WEBDOCTERMINAL\AICT_DECRYPTED\AICT-Source\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal

    ;
#line 2 "D:\AICTMAIN_WEBDOCTERMINAL\AICT_DECRYPTED\AICT-Source\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal.Models

    ;
#line 4 "D:\AICTMAIN_WEBDOCTERMINAL\AICT_DECRYPTED\AICT-Source\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

    ;
#line 5 "D:\AICTMAIN_WEBDOCTERMINAL\AICT_DECRYPTED\AICT-Source\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExpress.AspNetCore

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"f2ca61a9e5c08df5eae43eaa6a84c41200ec45617e5a64fc46095d9d023609da", @"/Areas/Import/Views/Setup/BillToLineView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"d9c22d530c8a142b4db368d33b9ab0d7e8720da4515d4bce483967cecc7394c6", @"/Areas/Import/_ViewImports.cshtml")]
    public class Areas_Import_Views_Setup_BillToLineView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/app.js/BillToLineView.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal form-label-left"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("BillToLineForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 748, true);
            WriteLiteral(@"<style>
    .newbox {
        text-align: center;
        padding: 3px 0px 3px 0px;
        font-size: 14px;
        font-weight: 600;
        margin: -3px -10px 10px -10px;
        color: white;
        background: #2a3f54;
        border-bottom: 1px solid #d1d1d1;
    }

    #error {
        visibility: hidden;
        width: 200px;
        background-color: #d25656;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        z-index: 1;
        font-size: 17px;
    }

        #error.show {
            visibility: visible;
            -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }
</style>

");
            EndContext();
            BeginContext(748, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f2ca61a9e5c08df5eae43eaa6a84c41200ec45617e5a64fc46095d9d023609da5983", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(801, 512, true);
            WriteLiteral(@"
<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""row"">
            <div class=""col-md-11"">
                <div class=""title_left"">
                    <h3>Bill To Line</h3>
                </div>
            </div>
        </div>
    </div>
    <div class=""clearfix""></div>

    <div class=""row"">
        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"" id=""odform"">
                    ");
            EndContext();
            BeginContext(1313, 5233, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f2ca61a9e5c08df5eae43eaa6a84c41200ec45617e5a64fc46095d9d023609da7722", async() => {
                BeginContext(1379, 5160, true);
                WriteLiteral(@"

                        <div class=""form-horizontal form-label-left row"">

                            <div class=""col-md-12 col-sm-12 col-xs-12 "">
                                <div class=""item form-group  x_panel"">
                                    <div class=""newbox"">
                                        Container Type
                                    </div>

                                    <div class=""radio"" style=""display: inline-block;"">
                                        <label>
                                            <input type=""radio"" id=""CFS"" name=""type"" value=""CFS"" onclick=""showFilters()"" style=""position: absolute;width: 40%;  height: 60%;  margin-left: -20px;  margin-top: 1px;"">   CFS
                                        </label>
                                    </div>
                                    <div class=""radio"" style=""display: inline-block;"">
                                        <label>
                                            <inp");
                WriteLiteral(@"ut type=""radio"" id=""CY"" value=""CY"" name=""type"" onclick=""showFilters()"" style=""position: absolute;width: 40%;  height: 60%;  margin-left: -20px;  margin-top: 1px;"">   CY
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id=""filters"">

                        </div>

                        <div class=""form-horizontal form-label-left row"">
                            <div class=""col-md-4 col-sm-12 col-xs-12"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                        Line
                                    </label>
                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                        <input type=""text"" id=""shippinggnet""  read");
                WriteLiteral(@"only=""readonly"" class=""form-control col-md-7 col-xs-12"">
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-4 col-sm-12 col-xs-12"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                        Goods
                                    </label>
                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                        <input type=""text""  readonly=""readonly"" id=""Goods"" class=""form-control col-md-7 col-xs-12"">
                                    </div>
                                </div>
                            </div>
                          

                        </div>

                        <div class=""form-horizontal form-label-left row"">
                            <div class=""");
                WriteLiteral(@"col-md-4 col-sm-12 col-xs-12"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                        Maunual Amount
                                    </label>
                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                        <input type=""number"" id=""maunualAmount"" required=""required"" class=""form-control mask col-md-7 col-xs-12"">
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-4 col-sm-12 col-xs-12"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                        Remarks
                                    </label>
                                    <");
                WriteLiteral(@"div class=""col-md-8 col-sm-8 col-xs-12"">
                                        <input type=""text"" required=""required"" id=""remarks"" class=""form-control col-md-7 col-xs-12"">
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-4 col-sm-12 col-xs-12"">

                                <button type=""button"" class=""btn btn-primary"" onclick=""saveManualAmount()"" style=""float: right;"">Manual Amount</button>
                                <button type=""button"" class=""btn btn-success"" onclick=""AssignOnlyTariff()"" style=""float: right;"">Only Tariff</button>
                                <button type=""button"" class=""btn btn-primary"" onclick=""AssignExStorage()"" style=""float: right;"">Ex Storage</button>
                                <button type=""button"" class=""btn btn-warning"" onclick=""BalancetoZero()"" style=""float: right;"">100 % Zero</button>

                            </div>

              ");
                WriteLiteral("          </div>\r\n\r\n                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(6546, 14513, true);
            WriteLiteral(@"

                    <div class=""row"">
                        <div id=""resdataGrid""></div>

                    </div>

                </div>
            </div>
        </div>
    </div>
</div>




<!--<script>



    document.onload = $(function () {
        var url_string = window.location.href
        var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");


        console.log(""billtolinenumber"", billtolinenumber);


        $.get('/Invoice/GetBillToLineByNumber?billtolineno=' + billtolinenumber, function (data) {

            var tariffdata = data;

            console.log(""tariffdata"", tariffdata);


            if (tariffdata.length) {

                $(""#BillToLineTariffgrid"").dxDataGrid({
                    dataSource: tariffdata,
                    keyExpr: ""billToLineId"",
                    showBorders: false,
                    showBorders: false,
                    showColumnLines: false,
        ");
            WriteLiteral(@"            dateSerializationFormat: ""yyyy/MM/dd HH:mm:ss"",


                    sorting: {
                        mode: ""none""
                    },
                    paging: {
                        enabled: false
                    },
                    editing: {
                        mode: ""row"",
                        allowUpdating: true,
                        allowDeleting: true,
                        selectTextOnEditStart: false,
                        startEditAction: ""click""
                    },
                    columns: [

                        {
                            dataField: ""type"",
                            caption: ""Type"",
                            width: 200,
                            allowEditing: false,

                        },
                        {
                            dataField: ""description"",
                            caption: ""Name"",
                            width: 200,
                            allowE");
            WriteLiteral(@"diting: false,

                        },

                        {
                            dataField: ""tariffAmount"",
                            caption: ""CR Amount #"",
                            allowEditing: false,

                        },
                        {
                            dataField: ""percent"",
                            caption: ""Percent"",
                            width: 100,
                            //calculateCellValue: function (rowData) {
                            //    var calculatedvalue = (rowData.discount / rowData.tariffAmount) * 100;
                            //    return rowData.percent = calculatedvalue;
                            //},

                            //calculateCellValue: function (rowData) {
                            //    var calculatedvalue = (rowData.tariffAmount * rowData.discount ) / 100 ;
                            //    return rowData.percent = calculatedvalue;
                            //},
          ");
            WriteLiteral(@"              },
                        {
                            dataField: ""discount"",
                            validationRules: [{ type: ""required"" }],
                            //allowEditing: false,
                            caption: ""Discount"",

                            //calculateCellValue: function (rowData) {
                            //    var calculatedvalue = (rowData.tariffAmount / 100) * rowData.percent;
                            //    return rowData.percent = calculatedvalue;
                            //},

                        },
                        //{
                        //    dataField: ""tariffHeadAmount"",
                        //    validationRules: [{ type: ""required"" }],
                        //    allowEditing: false,
                        //    caption: ""Tariff Head Amount"",
                        //    calculateCellValue: function (rowData) {
                        //        console.log(""rowData.totalCharges"", rowData.tariffAm");
            WriteLiteral(@"ount);
                        //        console.log(""rowData.discount"", rowData.discount);
                        //        var calculatedvalue = rowData.tariffAmount - rowData.discount;

                        //        console.log(""calculatedvalue"", calculatedvalue)

                        //        return rowData.tariffHeadAmount = calculatedvalue;
                        //    },

                        //},



                    ],

                    onRowUpdated: function (e) {
                        console.log(e);
                        if (e.data.description == ""HUNDREDPERCENT"" || e.data.description == ""EXSTORAGE"" || e.data.description == ""ONLYTARIFF"" || e.data.description == ""manualamount"") {

                             showToast(""not allow"", ""warning"");
                             window.setInterval('refresh()', 3000);

                        } else {

                            var data = e.data;

                            console.log(""data"",data)

    ");
            WriteLiteral(@"                        $.post('/Invoice/UpdateBillTolline', {data : data } ,function (data) {

                                if (data.error == true) {
                                    showToast(data.message, ""error"")

                                } else {
                                    showToast(data.message, ""success"")

                                }

                                window.setInterval('refresh()', 3000);


                            });


                        }
                    },

                    onRowRemoved: function (e) {
                        console.log(e)

                        if (e.data.description == ""HUNDREDPERCENT"" || e.data.description == ""EXSTORAGE"" || e.data.description == ""ONLYTARIFF"" || e.data.description == ""manualamount"" ) {


                            $.post('/Invoice/DeleteBillToLineById?key=' + e.data.billToLineId, function (data) {

                                if (data.error == true) {
                  ");
            WriteLiteral(@"                  showToast(data.message, ""error"")

                                } else {
                                    showToast(data.message, ""success"")

                                }

                                window.setInterval('refresh()', 3000);


                            });


                        } else {

                            showToast(""not allow"", ""warning"");
                            window.setInterval('refresh()', 3000);
                        }

                    }





                }).dxDataGrid(""instance"");



                ////var storageAmount = tariffdata[0].storageAmount;
                //var remarks = tariffdata[0].remarks;

                ////console.log(""storageAmount"", storageAmount)
                //console.log(""remarks"", remarks)

                ////$(""#storageAmount"").val(storageAmount);
                //$(""#remarks"").val(remarks);



            }




        })

    });


    function f");
            WriteLiteral(@"ormfiled() {

    }


    function saveBillToLineInfo() {


        var url_string = window.location.href
        var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");


        var tariffdata = $(""#BillToLineTariffgrid"").dxDataGrid(""option"", ""dataSource"");

        //var storageAmount = $(""#storageAmount"").val();

        console.log(""tariffdata"", tariffdata);
        //console.log(""storageAmount"", storageAmount)
        console.log(""billtolinenumber"", billtolinenumber)

        $.post('/Invoice/UpdateBillTollineInfo?billtolineno=' + billtolinenumber, { tariffdata: tariffdata }, function (data) {

            console.log(""data"", data);

            showToast(data.message, ""warning"");


            window.location.href = window.location.href;

        });


    }



    function refresh() {
        window.location.reload();
    }

    function BalancetoZero() {


        var url_string = window.location.href
       ");
            WriteLiteral(@" var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");

        $.post('/Invoice/AssignHundredPercent?billtolinenumber=' + billtolinenumber, function (data) {

            if (data.error == true) {
                showToast(data.message, ""error"")

            } else {
                showToast(data.message, ""success"")

            }

            window.setInterval('refresh()', 3000);



        });

        //console.log(""BalancetoZero"")


        //var tariffdata = $(""#BillToLineTariffgrid"").dxDataGrid(""option"", ""dataSource"");

        //console.log(""tariffdata"", tariffdata);

        //if (tariffdata.length) {
        //    tariffdata.forEach(e => e.percent = 100);

        //    console.log(""after percent age tariffdata"", tariffdata);


        //    $(""#BillToLineTariffgrid"").dxDataGrid({
        //        dataSource: tariffdata,
        //        keyExpr: ""billToLineId"",
        //        showBorders: false,
        // ");
            WriteLiteral(@"       showBorders: false,
        //        showColumnLines: false,
        //        dateSerializationFormat: ""yyyy/MM/dd HH:mm:ss"",


        //        sorting: {
        //            mode: ""none""
        //        },
        //        paging: {
        //            enabled: false
        //        },
        //        editing: {
        //            mode: ""row"",
        //            allowUpdating: true,
        //            selectTextOnEditStart: false,
        //            startEditAction: ""click""
        //        },
        //        columns: [

        //            {
        //                dataField: ""description"",
        //                caption: ""Name"",
        //                width: 200

        //            },
        //            {
        //                dataField: ""tariffAmount"",
        //                caption: ""CR Amount #""

        //            },
        //            {
        //                dataField: ""percent"",
        //           ");
            WriteLiteral(@"     caption: ""Percent"",
        //                width: 100
        //            },
        //            {
        //                dataField: ""discount"",
        //                validationRules: [{ type: ""required"" }],
        //                allowEditing: false,
        //                caption: ""Discount"",
        //                calculateCellValue: function (rowData) {
        //                    var calculatedvalue = (rowData.tariffAmount * 100) / rowData.percent;
        //                    return rowData.discount = calculatedvalue;
        //                },

        //            },
        //            {
        //                dataField: ""tariffHeadAmount"",
        //                validationRules: [{ type: ""required"" }],
        //                allowEditing: false,
        //                caption: ""Tariff Head Amount"",
        //                calculateCellValue: function (rowData) {
        //                    console.log(""rowData.totalCharges"", row");
            WriteLiteral(@"Data.tariffAmount);
        //                    console.log(""rowData.discount"", rowData.discount);
        //                    var calculatedvalue = rowData.tariffAmount - rowData.discount;

        //                    console.log(""calculatedvalue"", calculatedvalue)

        //                    return rowData.tariffHeadAmount = calculatedvalue;
        //                },

        //            },




        //        ]


        //    }).dxDataGrid(""instance"");


        //    // $(""#storageAmount"").val(0)
        //}



    }




    function AssignExStorage() {


        var url_string = window.location.href
        var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");

        $.post('/Invoice/AssignExStorage?billtolinenumber=' + billtolinenumber, function (data) {

            if (data.error == true) {
                showToast(data.message, ""error"")

            } else {
                showToast(data.");
            WriteLiteral(@"message, ""success"")

            }

            window.setInterval('refresh()', 3000);



        });
    }

    function AssignOnlyTariff() {


        var url_string = window.location.href
        var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");

        $.post('/Invoice/AssignOnlyTariff?billtolinenumber=' + billtolinenumber, function (data) {

            if (data.error == true) {
                showToast(data.message, ""error"")

            } else {
                showToast(data.message, ""success"")

            }

            window.setInterval('refresh()', 3000);



        });
    }

    function saveManualAmount() {


        var url_string = window.location.href
        var url = new URL(url_string);
        var billtolinenumber = url.searchParams.get(""billtolinenumber"");

        var manualamt = $('#manualAmount').val();

        if (manualamt) {

            $.post('/Invoice/SaveManualAmount?billtol");
            WriteLiteral(@"inenumber=' + billtolinenumber + '&manualamt=' + manualamt, function (data) {

                if (data.error == true) {
                    showToast(data.message, ""error"")

                } else {
                    showToast(data.message, ""success"")

                }

                window.setInterval('refresh()', 3000);



            });

        } else {
            showToast(""please enter amount"", ""error"")
        }


    }

    function showToast(message, icon) {

        $.toast({
            heading: message,
            showHideTransition: 'slide',
            position: 'bottom-right',
            icon: icon
        });
    }




</script>







<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""title_left"">
            <h3>Bill To Line</h3>
        </div>
    </div>
    <div class=""clearfix""></div>
    <div class=""row"">

        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">");
            WriteLiteral("\n\r\n                <div class=\"x_content\">\r\n\r\n\r\n                    <div id=\"BillToLineTariffgrid\">\r\n\r\n\r\n                    </div>\r\n\r\n                    <div class=\"row\">-->\r\n");
            EndContext();
            BeginContext(21512, 1339, true);
            WriteLiteral(@"<!--<d  iv class=""col-md-12 col-sm-4 col-xs-12"">
                            <div class=""item form-group"">
                                <label class=""control-label col-md-6 col-sm-4 col-xs-12"" for=""cnic"">
                                    Manual Amount :
                                </label>
                                <div class=""col-md-6 col-sm-8 col-xs-12"">
                                    <input type=""number"" class=""form-control"" id=""manualAmount"" style=""text-align: right;"">
                                </div>
                            </div>
                        </div>



                    </div>

                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-warning"" onclick=""BalancetoZero()"" style=""float: right;"">100 % Zero</button>
                    <button type=""button"" class=""btn btn-primary"" onclick=""AssignExStorage()"" style=""float: right;"">Ex Storage</button>
                    <button type=""button"" class=""btn btn-s");
            WriteLiteral(@"uccess"" onclick=""AssignOnlyTariff()"" style=""float: right;"">Only Tariff</button>
                    <button type=""button"" class=""btn btn-primary"" onclick=""saveManualAmount()"">Manual Amount</button>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>-->
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591

#pragma checksum "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Import_Views_Setup_PortChargesView), @"mvc.1.0.view", @"/Areas/Import/Views/Setup/PortChargesView.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Import/Views/Setup/PortChargesView.cshtml", typeof(AspNetCore.Areas_Import_Views_Setup_PortChargesView))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal

    ;
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal.Models

    ;
#line 4 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

    ;
#line 5 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExpress.AspNetCore

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c", @"/Areas/Import/Views/Setup/PortChargesView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"d9c22d530c8a142b4db368d33b9ab0d7e8720da4515d4bce483967cecc7394c6", @"/Areas/Import/_ViewImports.cshtml")]
    public class Areas_Import_Views_Setup_PortChargesView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/app.js/PortChargesView.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "ALL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "DLV", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "UNDLV", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "FCL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "LCL", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "CY", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "CFS", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
  
    var agents = (IEnumerable<SelectListItem>)ViewData["ShippingAgents"];
    var goodsHead = (IEnumerable<SelectListItem>)ViewData["GoodsHead"];

#line default
#line hidden

            BeginContext(157, 1275, true);
            WriteLiteral(@"
<style>
    .newbox {
        text-align: center;
        padding: 3px 0px 3px 0px;
        font-size: 14px;
        font-weight: 600;
        margin: -3px -10px 10px -10px;
        color: white;
        background: #2a3f54;
        border-bottom: 1px solid #d1d1d1;
    }

    #error {
        visibility: hidden;
        width: 200px;
        background-color: #d25656;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        z-index: 1;
        font-size: 17px;
    }

        #error.show {
            visibility: visible;
            -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }

    .dx-header-row > td > .dx-datagrid-text-content {
        white-space: normal;
        vertical-align: top;
        text-align: center;
    }


    #PortchargesGrid {
        max-height: 500px;
    }
</style>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare");
            WriteLiteral(".com/ajax/libs/xlsx/0.15.3/xlsx.full.min.js\"></script>\r\n\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.1.1/exceljs.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.2/FileSaver.min.js\"></script>\r\n");
            EndContext();
            BeginContext(1432, 54, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c8007", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1486, 3227, true);
            WriteLiteral(@"
<style>
    .newbox {
        text-align: center;
        padding: 3px 0px 3px 0px;
        font-size: 14px;
        font-weight: 600;
        margin: -3px -10px 10px -10px;
        color: white;
        background: #2a3f54;
        border-bottom: 1px solid #d1d1d1;
    }
</style>
<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""row"">
            <div class=""col-md-11"">
                <div class=""title_left"">
                    <h3> Port Charges </h3>
                </div>
            </div>
            <div class=""col-md-1"">
            </div>
        </div>
    </div>
    <div class=""clearfix""></div>

    <div class=""row"">
        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"">

                    <div class=""row"" id=""tabsdiv"">
                        <div class=""col-md-12 col-sm-12 col-xs-12"">
                            <div class=""x_panel"">
                  ");
            WriteLiteral(@"              <div class=""x_content"">
                                    <ul class=""nav nav-tabs bar_tabs"" id=""myTab"" role=""tablist"">
                                        <li class=""nav-item active"">
                                            <a class=""nav-link active"" id=""IndexWise"" data-toggle=""tab"" href=""#anf"" role=""tab"" aria-controls=""anf"" aria-selected=""true"" >Index Wise</a>
                                        </li>
                                        <li class=""nav-item"">
                                            <a class=""nav-link"" id=""UndeliveredPerBox"" data-toggle=""tab"" href=""#paperready"" role=""tab"" aria-controls=""paperready"" aria-selected=""false""  >Undelivered (Per Box) Wise</a>
                                        </li>
                                    </ul>
                                    <div class=""tab-content"" id=""myTabContent"">
                                        <div class=""tab-pane fade active in"" id=""anf"" role=""tabpanel"" aria-labelledby=""IndexWise"">
");
            WriteLiteral(@"
                                            <div class=""row"">
                                                <div id=""anf-grid""></div>

                                                <div class=""ln_solid""></div>
                                                <div class=""form-group"">
                                                    <div class=""col-md-12 col-sm-12 col-xs-12"">

                                                        <div class=""row"">

                                                            <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                        Vir No: <span class=""required"">*</span>
                                                                    </label>
                            ");
            WriteLiteral("                                        <div class=\"col-md-8 col-sm-8 col-xs-12\">\r\n                                                                        ");
            EndContext();
            BeginContext(4715, 706, false);
            Write(
#line 115 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                          Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("virnolist")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getvirno"))
                                                                            .Placeholder("Type GDNumber...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(5422, 934, true);
            WriteLiteral(@"
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                        Container No: <span class=""required"">*</span>
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        ");
            EndContext();
            BeginContext(6358, 723, false);
            Write(
#line 132 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                          Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("containerlist")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getigmocontainers"))
                                                                            .Placeholder("Type Container No...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(7082, 930, true);
            WriteLiteral(@"
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                        Index No: <span class=""required"">*</span>
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        ");
            EndContext();
            BeginContext(8014, 718, false);
            Write(
#line 149 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                          Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("containerIndexlist")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getigmoindexes"))
                                                                            .Placeholder("Type Index...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(8733, 1004, true);
            WriteLiteral(@"
                                                                    </div>
                                                                </div>
                                                            </div>

                                                        </div>
                                                        <div class=""row"">

                                                            <div class=""col-md-4"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4"" for=""name"">
                                                                        Agent Name
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        ");
            EndContext();
            BeginContext(9738, 113, false);
            Write(
#line 170 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                         Html.DropDownList("Name", agents, "Select Agent", new { @class = "form-control select2", @id = "agentdropdown" })

#line default
#line hidden
            );
            EndContext();
            BeginContext(9851, 863, true);
            WriteLiteral(@"
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class=""col-md-4"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4"" for=""name"">
                                                                        Goods Head
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        ");
            EndContext();
            BeginContext(10715, 125, false);
            Write(
#line 181 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                         Html.DropDownList("Name", goodsHead, "Select Goods Head", new { @class = "form-control select2", @id = "goodsheaddropdown" })

#line default
#line hidden
            );
            EndContext();
            BeginContext(10840, 1001, true);
            WriteLiteral(@"
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""col-sm-4"">

                                                                <div class=""form-group"">
                                                                    <label class=""control-label  col-md-4"" for=""first-name"">
                                                                        Status <span class=""required"">*</span>
                                                                    </label>
                                                                    <div class=""col-md-8 col-xs-12"">
                                                                        <select class=""form-control"" id=""type"">
                                                                            ");
            EndContext();
            BeginContext(11841, 32, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c21934", async() => {
                BeginContext(11861, 3, true);
                WriteLiteral("ALL");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(11873, 78, true);
            WriteLiteral("\r\n                                                                            ");
            EndContext();
            BeginContext(11951, 32, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c23412", async() => {
                BeginContext(11971, 3, true);
                WriteLiteral("DLV");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(11983, 78, true);
            WriteLiteral("\r\n                                                                            ");
            EndContext();
            BeginContext(12061, 36, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c24890", async() => {
                BeginContext(12083, 5, true);
                WriteLiteral("UNDLV");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12097, 3570, true);
            WriteLiteral(@"
                                                                        </select>
                                                                    </div>

                                                                </div>
                                                            </div>

                                                        </div>
                                                        <div class=""row"">
                                                            <div class=""col-md-4  col-xs-12"">
                                                                <div class=""control-group"">
                                                                    <div class=""controls"">
                                                                        <label class=""control-label col-md-4 col-xs-12"" for=""first-name"">
                                                                            From:
                                                                        </labe");
            WriteLiteral(@"l>
                                                                        <div class=""col-md-8  col-xs-12"">
                                                                            <input type=""date"" class=""form-control"" id=""fromdate"">
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""col-md-4  col-xs-12"">
                                                                <div class=""control-group"">
                                                                    <div class=""controls"">
                                                                        <label class=""control-label col-md-4  col-xs-12"" for=""first-name"">
                                                                 ");
            WriteLiteral(@"           To:
                                                                        </label>
                                                                        <div class=""col-md-8  col-xs-12"">
                                                                            <input type=""date"" class=""form-control"" id=""todate"">
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""col-md-4 col-sm-4 col-xs-12"" id=""containertpe"">
                                                                <div class=""form-group"">
                                                                    <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                      ");
            WriteLiteral(@"                                  Container Type# <span class=""required"">*</span>
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        <select class=""item form-control"" name=""ContainerType"" id=""ContainerType"">

                                                                            ");
            EndContext();
            BeginContext(15667, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c30017", async() => {
                BeginContext(15687, 9, true);
                WriteLiteral("CFS (FCL)");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(15705, 78, true);
            WriteLiteral("\r\n                                                                            ");
            EndContext();
            BeginContext(15783, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c31501", async() => {
                BeginContext(15803, 9, true);
                WriteLiteral("CFS (LCL)");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(15821, 78, true);
            WriteLiteral("\r\n                                                                            ");
            EndContext();
            BeginContext(15899, 30, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c32985", async() => {
                BeginContext(15918, 2, true);
                WriteLiteral("CY");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(15929, 5534, true);
            WriteLiteral(@"
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            </div>




                                                        </div>

                                                        <div class=""row"">
                                                            <div class=""col-md-12"">
                                                                <div class=""form-group"">
                                                                    <button type=""button"" class=""btn btn-dark"" onclick=""showcargoDetaildesc()"" style=""float:right""> View Detail</button>

                                                                </div>
                                                            </div>

                                                        </div>
     ");
            WriteLiteral(@"                                                   <div class=""row"">
                                                            <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                <div class=""item form-group"">
                                                                    <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                        File Select: <span class=""required"">*</span>
                                                                    </label>
                                                                    <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                        <input type=""file"" class=""form form-control"" id=""fileUpload"" accept="".xls,.xlsx"" style="" background-color: beige; color: black;"" /><br />
                                                                    </div>
                        ");
            WriteLiteral(@"                                        </div>
                                                            </div>
                                                            <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                <div class=""item form-group"">
                                                                    <button type=""button"" class=""btn btn-success"" id=""uploadExcel"">Upload File</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class=""ln_solid""></div>


                                                        <div class=""row"">
                                                            <div class=""col-md-12 col-sm-12 col-xs-12"">
                                                                <div id=""large-indi");
            WriteLiteral(@"cator""></div>
                                                                <div id=""PortchargesGrid"">

                                                                </div>
                                                            </div>
                                                        </div>


                                                        <div class=""row"">
                                                            <div class=""col-md-12 col-sm-12 col-xs-12"">
                                                                <button type=""button"" class=""btn btn-default"" onclick=""SaveInfo()"" style=""float:right"">Save</button>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>



                                        </div>

   ");
            WriteLiteral(@"                                     <div class=""tab-pane fade"" id=""paperready"" role=""tabpanel"" aria-labelledby=""UndeliveredPerBox"">
                                            <div class=""row"">

                                                <div class=""row"">
                                                    <div id=""paperready-grid""></div>


                                                    <div class=""ln_solid""></div>
                                                    <div class=""form-group"">
                                                        <div class=""col-md-12 col-sm-12 col-xs-12"">

                                                            <div class=""row"">

                                                                <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                    <div class=""item form-group"">
                                                                        <label class=""control-label col-md-4 col-sm-3 ");
            WriteLiteral(@"col-xs-12"" for=""name"">
                                                                            Vir No: <span class=""required"">*</span>
                                                                        </label>
                                                                        <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                            ");
            EndContext();
            BeginContext(21465, 707, false);
            Write(
#line 321 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                              Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("virnolistPerBox")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getvirno"))
                                                                            .Placeholder("Type IGM...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(22173, 974, true);
            WriteLiteral(@"
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                    <div class=""item form-group"">
                                                                        <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                            Container No: <span class=""required"">*</span>
                                                                        </label>
                                                                        <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                            ");
            EndContext();
            BeginContext(23149, 729, false);
            Write(
#line 338 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                              Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("containerlistPerBox")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getigmocontainers"))
                                                                            .Placeholder("Type Container No...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(23879, 970, true);
            WriteLiteral(@"
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                    <div class=""item form-group"">
                                                                        <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                            Index No: <span class=""required"">*</span>
                                                                        </label>
                                                                        <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                            ");
            EndContext();
            BeginContext(24851, 724, false);
            Write(
#line 355 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Setup\PortChargesView.cshtml"
                                                                              Html.DevExtreme()
                                                                            .Autocomplete()
                                                                            .ID("containerIndexlistPerBox")
                                                                            .DataSource(d => d.Mvc()
                                                                            .Controller("APICalls")
                                                                            .Area("")
                                                                            .LoadAction("Getigmoindexes"))
                                                                            .Placeholder("Type Index...")

#line default
#line hidden
            );
            EndContext();
            BeginContext(25576, 1308, true);
            WriteLiteral(@"
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                            </div>
                                                            <div class=""row"">
                                                                <div class=""col-md-4 col-sm-4 col-xs-12"" id=""containertpe"">
                                                                    <div class=""form-group"">
                                                                        <label class=""control-label col-md-4 col-sm-4 col-xs-12"" for=""first-name"">
                                                                            Container Type# <span class=""required"">*</span>
                                                                        </label>
                                                                       ");
            WriteLiteral(@" <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                            <select class=""item form-control"" name=""ContainerType"" id=""ContainerTypePerBox"">

                                                                                ");
            EndContext();
            BeginContext(26884, 32, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c46958", async() => {
                BeginContext(26904, 3, true);
                WriteLiteral("CFS");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(26916, 82, true);
            WriteLiteral("\r\n                                                                                ");
            EndContext();
            BeginContext(26998, 30, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ef232685574e2d27af4a6337086b07aee3345af7fb420877c17e9da97e05e5c48440", async() => {
                BeginContext(27017, 2, true);
                WriteLiteral("CY");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(27028, 33655, true);
            WriteLiteral(@"
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                </div>


                                                                <div class=""col-md-8"">
                                                                    <div class=""form-group"">
                                                                        <button type=""button"" class=""btn btn-dark"" onclick=""showcargoDetaildescPerBox()"" style=""float:right""> View Detail</button>

                                                                    </div>
                                                                </div>

                                                            </div>

                                                            <div class=""row"">
                        ");
            WriteLiteral(@"                                        <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                    <div class=""item form-group"">
                                                                        <label class=""control-label col-md-4 col-sm-3 col-xs-12"" for=""name"">
                                                                            File Select: <span class=""required"">*</span>
                                                                        </label>
                                                                        <div class=""col-md-8 col-sm-8 col-xs-12"">
                                                                            <input type=""file"" class=""form form-control"" id=""fileUploadPerBox"" accept="".xls,.xlsx"" style="" background-color: beige; color: black;"" /><br />
                                                                        </div>
                                                                    </div>
    ");
            WriteLiteral(@"                                                            </div>
                                                                <div class=""col-md-4 col-sm-4 col-xs-12"">
                                                                    <div class=""item form-group"">
                                                                        <button type=""button"" class=""btn btn-success"" id=""uploadExcelPerBox"">Upload File</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class=""ln_solid""></div>


                                                            <div class=""row"">
                                                                <div class=""col-md-12 col-sm-12 col-xs-12"">
                                                                    <div id=""large-indica");
            WriteLiteral(@"tor""></div>
                                                                    <div id=""PortchargesGridPerBox"">

                                                                    </div>
                                                                </div>
                                                            </div>


                                                            <div class=""row"">
                                                                <div class=""col-md-12 col-sm-12 col-xs-12"">
                                                                    <button type=""button"" class=""btn btn-default"" onclick=""SaveInfoPerBox()"" style=""float:right"">Save</button>
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
");
            WriteLiteral(@"

                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                     

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $('.select2').select2();



    var selectedFile;
    var selectedFilePerBox;
    document
        .getElementById(""fileUpload"")
        .addEventListener(""change"", function (event) {
            selectedFile = event.target.files[0];
        });
     
    document
        .getElementById(""uploadExcel"")
        .addEventListener(""click"", function () {
            var resultvalue = true;
            console.log(""selectedFile"", selectedFile)

            if (selectedFile) {

                var fileReader = new FileReader();
                fileReader.onload = function (event) {
               ");
            WriteLiteral(@"     var data = event.target.result;

                    var workbook = XLSX.read(data, {
                        type: ""binary""
                    });

                    workbook.SheetNames.forEach(sheet => {
                        let rowObject = XLSX.utils.sheet_to_row_object_array(
                            workbook.Sheets[sheet]
                        );

                        console.log(""rowObject"", rowObject)

                        if (rowObject) {

                            var newresult = rowObject.filter(c => c.Is_Delivered == 'false');
                            var deliverdresultdata = rowObject.filter(c => c.Is_Delivered == 'true');

                            if (newresult.length) {


                                console.log(""newresult"", newresult)

                                newresult.forEach(c => {


                                    if ($.isNumeric(c.Demurrage_Charges) == false) {
                                        resultvalue = false");
            WriteLiteral(@";
                                        //return showToast(""please add Demurrage Charges in numbers "", ""error"")
                                        return alert(""please add Demurrage Charges in numbers "");

                                    }
                                    if ($.isNumeric(c.Weighment_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add  Weighment Charges in numbers "", ""error"")
                                        return alert(""please add  Weighment Charges in numbers "");
                                    }
                                    if ($.isNumeric(c.OverWeight_Penalty) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add  Over Weight Penalty in numbers "", ""error"")
                                        return alert(""please add  Over Weight Penalty in numbers "");
");
            WriteLiteral(@"                                    }
                                    if ($.isNumeric(c.DetentionCharges_Or_BulletSeal) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add detentionChargesOrBulletSeal in numbers "", ""error"")
                                        return alert(""please add detentionChargesOrBulletSeal in numbers "");
                                    }
                                    if ($.isNumeric(c.THC_PHC_KDLP_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add thcPhcKdlpCharges in numbers "", ""error"")
                                        return alert(""please add thcPhcKdlpCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.Lolo_Charges) == false) {
                                        resultvalue = false;
      ");
            WriteLiteral(@"                                  //return showToast(""please add loloCharges in numbers "", ""error"")
                                        return alert(""please add loloCharges in numbers"");
                                    }
                                    if ($.isNumeric(c.Qict_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add qictCharges in numbers "", ""error"")
                                        return alert(""please add qictCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.Other_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add otherCharges in numbers "", ""error"")
                                        return alert(""please add otherCharges in numbers "");
                                    }
                         ");
            WriteLiteral(@"           if ($.isNumeric(c.Wash_And_Clean_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add washAndCleanCharges in numbers "", ""error"")
                                        return alert(""please add washAndCleanCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.ANF) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add anf in numbers "", ""error"")
                                        return alert(""please add anf in numbers "");
                                    }
                                    if ($.isNumeric(c.Pallet) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add pallet in numbers "", ""error"")
                                        retur");
            WriteLiteral(@"n alert(""please add pallet in numbers "");
                                    }
                                    if ($.isNumeric(c.Recover) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add recover in numbers "", ""error"")
                                        return alert(""please add recover in numbers "");
                                    }
                                    if ($.isNumeric(c.Transport_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add transportCharges in numbers "", ""error"")
                                        return alert(""please add transportCharges in numbers "");
                                    }


                                    if (c.Demurrage_Charges < 0) {
                                        resultvalue = false;
                                        //");
            WriteLiteral(@"return showToast(""please add Demurrage Charges > 0 "", ""error"")
                                        return alert(""please add Demurrage Charges > 0 "");
                                    }
                                    if (c.Weighment_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add  Weighment Charges  > 0 "", ""error"")
                                        return alert(""please add  Weighment Charges  > 0 "");
                                    }
                                    if (c.OverWeight_Penalty < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add  Over Weight Penalty  > 0  "", ""error"")
                                        return alert(""please add  Over Weight Penalty  > 0  "");
                                    }
                                    if (c.DetentionCharges_Or_BulletSeal < 0) {");
            WriteLiteral(@"
                                        resultvalue = false;
                                        //return showToast(""please add detentionChargesOrBulletSeal  > 0 "", ""error"")
                                        return alert(""please add detentionChargesOrBulletSeal  > 0 "");
                                    }
                                    if (c.Lolo_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add thcPhcKdlpCharges  > 0 "", ""error"")
                                        return alert(""please add thcPhcKdlpCharges  > 0 "");
                                    }
                                    if (c.Lolo_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add loloCharges > 0"", ""error"")
                                        return alert(""please add loloCharges > 0"");
                           ");
            WriteLiteral(@"         }
                                    if (c.Qict_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add qictCharges  > 0"", ""error"")
                                        return alert(""please add qictCharges  > 0"");
                                    }
                                    if (c.Other_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add otherCharges  > 0 "", ""error"")
                                        return alert(""please add otherCharges  > 0 "");
                                    }
                                    if (c.Wash_And_Clean_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add washAndCleanCharges  > 0 "", ""error"")
                                        return alert(""please ad");
            WriteLiteral(@"d washAndCleanCharges  > 0  "");
                                    }
                                    if (c.ANF < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add anf  > 0"", ""error"")
                                        return alert(""please add anf  > 0"");
                                    }
                                    if (c.Pallet < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add pallet > 0"", ""error"")
                                        return alert(""please add pallet > 0"");
                                    }
                                    if (c.Recover < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add recover  > 0"", ""error"")
                                        return alert(""please add recover  > 0"")");
            WriteLiteral(@";
                                    }
                                    if (c.Transport_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add transportCharges > 0"", ""error"")
                                        return alert(""please add transportCharges > 0"");
                                    }


                                });

                                if (resultvalue == true) {
                                    console.log(""ok newresult"", newresult)

                                    var result = [];
                                    newresult.forEach(c => {

                                        let x = {
                                            virNumber: c.IGM,
                                            indexNumber: c.Index_No,
                                            containerNumber: c.Container_No,
                                            type: c.Type,");
            WriteLiteral(@"
                                            demurrageCharges: c.Demurrage_Charges,
                                            weighmentCharges: c.Weighment_Charges,
                                            overWeightPenalty: c.OverWeight_Penalty,
                                            detentionChargesOrBulletSeal: c.DetentionCharges_Or_BulletSeal,
                                            thcPhcKdlpCharges: c.THC_PHC_KDLP_Charges,
                                            loloCharges: c.Lolo_Charges,
                                            qictCharges: c.Qict_Charges,
                                            otherCharges: c.Other_Charges,
                                            washAndCleanCharges: c.Wash_And_Clean_Charges,
                                            anf: c.ANF,
                                            pallet: c.Pallet,
                                            recover: c.Recover,
                                            transportCharges: c.Transpo");
            WriteLiteral(@"rt_Charges,
                                            totalCharges: c.Demurrage_Charges + c.Weighment_Charges + c.OverWeight_Penalty + c.DetentionCharges_Or_BulletSeal + c.THC_PHC_KDLP_Charges + c.Lolo_Charges + c.Qict_Charges + c.Other_Charges +
                                                c.Wash_And_Clean_Charges + c.ANF + c.Pallet + c.Recover + c.Transport_Charges
                                        };

                                        result.push(x);

                                    })

                                    console.log(""result"", result)
                                    console.log(""deliverdresultdata "", deliverdresultdata)
                                    console.log(""deliverdresultdata "", deliverdresultdata.length)

                                    $.post('/Tariff/UpdatePortChargesAmountFromExcelSheet', { model: result }, function (data) {

                                        if (data.error == true) {
                                        ");
            WriteLiteral(@"    //showToast(data.message, ""error"")
                                            alert(data.message);

                                        } else {
                                            //showToast(data.message + ""and total "" + deliverdresultdata.deliverdresultdata + ""are Delivered"", ""success"");

                                            alert(data.message + ""and total "" + deliverdresultdata.deliverdresultdata + ""are Delivered"");
                                        }

                                    });
                                }


                              
                                }

                            }


                        });
                };
                fileReader.readAsBinaryString(selectedFile);
            }
        });


    document
        .getElementById(""fileUploadPerBox"")
        .addEventListener(""change"", function (event) {
            selectedFilePerBox = event.target.files[0];
        });


    docu");
            WriteLiteral(@"ment
        .getElementById(""uploadExcelPerBox"")
        .addEventListener(""click"", function () {
            var resultvalue = true;
            console.log(""selectedFile"", selectedFile)

            if (selectedFile) {

                var fileReader = new FileReader();
                fileReader.onload = function (event) {
                    var data = event.target.result;

                    var workbook = XLSX.read(data, {
                        type: ""binary""
                    });

                    workbook.SheetNames.forEach(sheet => {
                        let rowObject = XLSX.utils.sheet_to_row_object_array(
                            workbook.Sheets[sheet]
                        );

                        console.log(""rowObject"", rowObject)

                        if (rowObject) {

                            var newresult = rowObject;

                            //var newresult = rowObject.filter(c => c.Is_Delivered == 'false');
                          ");
            WriteLiteral(@"  //var deliverdresultdata = rowObject.filter(c => c.Is_Delivered == 'true');

                            if (newresult.length) {


                                console.log(""newresult"", newresult)

                                newresult.forEach(c => {


                                    if ($.isNumeric(c.Demurrage_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add Demurrage Charges in numbers "", ""error"")
                                        return alert(""please add Demurrage Charges in numbers "");

                                    }
                                    if ($.isNumeric(c.Weighment_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add  Weighment Charges in numbers "", ""error"")
                                        return alert(""please add  Weighment Charges in num");
            WriteLiteral(@"bers "");
                                    }
                                    if ($.isNumeric(c.OverWeight_Penalty) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add  Over Weight Penalty in numbers "", ""error"")
                                        return alert(""please add  Over Weight Penalty in numbers "");
                                    }
                                    if ($.isNumeric(c.DetentionCharges_Or_BulletSeal) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add detentionChargesOrBulletSeal in numbers "", ""error"")
                                        return alert(""please add detentionChargesOrBulletSeal in numbers "");
                                    }
                                    if ($.isNumeric(c.THC_PHC_KDLP_Charges) == false) {
                                        result");
            WriteLiteral(@"value = false;
                                        //return showToast(""please add thcPhcKdlpCharges in numbers "", ""error"")
                                        return alert(""please add thcPhcKdlpCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.Lolo_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add loloCharges in numbers "", ""error"")
                                        return alert(""please add loloCharges in numbers"");
                                    }
                                    if ($.isNumeric(c.Qict_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add qictCharges in numbers "", ""error"")
                                        return alert(""please add qictCharges in numbers "");
                                 ");
            WriteLiteral(@"   }
                                    if ($.isNumeric(c.Other_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add otherCharges in numbers "", ""error"")
                                        return alert(""please add otherCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.Wash_And_Clean_Charges) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add washAndCleanCharges in numbers "", ""error"")
                                        return alert(""please add washAndCleanCharges in numbers "");
                                    }
                                    if ($.isNumeric(c.ANF) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add anf in numbers "", ""e");
            WriteLiteral(@"rror"")
                                        return alert(""please add anf in numbers "");
                                    }
                                    if ($.isNumeric(c.Pallet) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add pallet in numbers "", ""error"")
                                        return alert(""please add pallet in numbers "");
                                    }
                                    if ($.isNumeric(c.Recover) == false) {
                                        resultvalue = false;
                                        //return showToast(""please add recover in numbers "", ""error"")
                                        return alert(""please add recover in numbers "");
                                    }
                                    if ($.isNumeric(c.Transport_Charges) == false) {
                                        resultvalue = false;
         ");
            WriteLiteral(@"                               //return showToast(""please add transportCharges in numbers "", ""error"")
                                        return alert(""please add transportCharges in numbers "");
                                    }


                                    if (c.Demurrage_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add Demurrage Charges > 0 "", ""error"")
                                        return alert(""please add Demurrage Charges > 0 "");
                                    }
                                    if (c.Weighment_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add  Weighment Charges  > 0 "", ""error"")
                                        return alert(""please add  Weighment Charges  > 0 "");
                                    }
                                    if (c.");
            WriteLiteral(@"OverWeight_Penalty < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add  Over Weight Penalty  > 0  "", ""error"")
                                        return alert(""please add  Over Weight Penalty  > 0  "");
                                    }
                                    if (c.DetentionCharges_Or_BulletSeal < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add detentionChargesOrBulletSeal  > 0 "", ""error"")
                                        return alert(""please add detentionChargesOrBulletSeal  > 0 "");
                                    }
                                    if (c.Lolo_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add thcPhcKdlpCharges  > 0 "", ""error"")
                                        return alert");
            WriteLiteral(@"(""please add thcPhcKdlpCharges  > 0 "");
                                    }
                                    if (c.Lolo_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add loloCharges > 0"", ""error"")
                                        return alert(""please add loloCharges > 0"");
                                    }
                                    if (c.Qict_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add qictCharges  > 0"", ""error"")
                                        return alert(""please add qictCharges  > 0"");
                                    }
                                    if (c.Other_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add otherCharges  > 0 "", ""error"")
                  ");
            WriteLiteral(@"                      return alert(""please add otherCharges  > 0 "");
                                    }
                                    if (c.Wash_And_Clean_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add washAndCleanCharges  > 0 "", ""error"")
                                        return alert(""please add washAndCleanCharges  > 0  "");
                                    }
                                    if (c.ANF < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add anf  > 0"", ""error"")
                                        return alert(""please add anf  > 0"");
                                    }
                                    if (c.Pallet < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add pallet > 0"", ""error"")");
            WriteLiteral(@"
                                        return alert(""please add pallet > 0"");
                                    }
                                    if (c.Recover < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add recover  > 0"", ""error"")
                                        return alert(""please add recover  > 0"");
                                    }
                                    if (c.Transport_Charges < 0) {
                                        resultvalue = false;
                                        //return showToast(""please add transportCharges > 0"", ""error"")
                                        return alert(""please add transportCharges > 0"");
                                    }


                                });

                                if (resultvalue == true) {
                                    console.log(""ok newresult"", newresult)

                      ");
            WriteLiteral(@"              var result = [];
                                    newresult.forEach(c => {

                                        let x = {
                                            virNumber: c.IGM,
                                            containerNumber: c.Container_No,
                                            type: c.Type,
                                            demurrageCharges: c.Demurrage_Charges,
                                            weighmentCharges: c.Weighment_Charges,
                                            overWeightPenalty: c.OverWeight_Penalty,
                                            detentionChargesOrBulletSeal: c.DetentionCharges_Or_BulletSeal,
                                            thcPhcKdlpCharges: c.THC_PHC_KDLP_Charges,
                                            loloCharges: c.Lolo_Charges,
                                            qictCharges: c.Qict_Charges,
                                            otherCharges: c.Other_Charges,
  ");
            WriteLiteral(@"                                          washAndCleanCharges: c.Wash_And_Clean_Charges,
                                            anf: c.ANF,
                                            pallet: c.Pallet,
                                            recover: c.Recover,
                                            transportCharges: c.Transport_Charges,
                                            totalCharges: c.Demurrage_Charges + c.Weighment_Charges + c.OverWeight_Penalty + c.DetentionCharges_Or_BulletSeal + c.THC_PHC_KDLP_Charges + c.Lolo_Charges + c.Qict_Charges + c.Other_Charges +
                                                c.Wash_And_Clean_Charges + c.ANF + c.Pallet + c.Recover + c.Transport_Charges
                                        };

                                        result.push(x);

                                    })

                                    console.log(""result"", result) 

                                    $.post('/Tariff/UpdatePortChargesPerBoxAmountFr");
            WriteLiteral(@"omExcelSheet', { datamodel: result }, function (data) {

                                        if (data.error == true) {
                                            //showToast(data.message, ""error"")
                                            alert(data.message);

                                        } else {
                                            //showToast(data.message + ""and total "" + deliverdresultdata.deliverdresultdata + ""are Delivered"", ""success"");
                                            alert(data.message);
                                        }

                                    });
                                }



                            }

                        }


                    });
                };
                fileReader.readAsBinaryString(selectedFile);
            }
        });
</script>


");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591

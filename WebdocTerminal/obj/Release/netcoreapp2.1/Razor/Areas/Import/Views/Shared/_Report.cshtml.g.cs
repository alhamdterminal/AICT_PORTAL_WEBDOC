#pragma checksum "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Shared\_Report.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "92ed248f1dcd911a956fe243469626d042a5ebc0e0725e81b4c60a851a66732a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Import_Views_Shared__Report), @"mvc.1.0.view", @"/Areas/Import/Views/Shared/_Report.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Import/Views/Shared/_Report.cshtml", typeof(AspNetCore.Areas_Import_Views_Shared__Report))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal

    ;
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal.Models

    ;
#line 4 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

    ;
#line 5 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExpress.AspNetCore

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"92ed248f1dcd911a956fe243469626d042a5ebc0e0725e81b4c60a851a66732a", @"/Areas/Import/Views/Shared/_Report.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"d9c22d530c8a142b4db368d33b9ab0d7e8720da4515d4bce483967cecc7394c6", @"/Areas/Import/_ViewImports.cshtml")]
    public class Areas_Import_Views_Shared__Report : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DevExpress.XtraReports.UI.XtraReport>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(45, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(356, 2669, true);
            WriteLiteral(@"

    <script>
        function InitDevExWebDocumentViewer(s, e) {

            e.Actions[7].zoom(1.5);

            console.log(""DevExpress"", DevExpress.Report.Preview)
  

        }

        function CustomizeExportOptions(s, e) {
            console.log(""s"", s);
            console.log(""e"", e);
            console.log(""e"", e._options.exportOptions.html);
             
            //event.args.HideExportOptionsPanel();
            //var model = event._options.exportOptions(ExportFormatID.XLSX);
            //// Encrypt the file. Encryption is performed in asynchronous mode.
            ////model.encryptionOptions.password(""1234"");
            //model.documentOptions.author(""Me"");

            // console.log(""eee"", e._options.exportOptions.pdf);
            // console.log(""sss"", s._previewModel);
        }
         
         function asad(a , b) {
        console.log(""a"", a);
             console.log(""b"", b);

             console.log( b.GetById('dxrd-preview-toolbar-scrollable");
            WriteLiteral(@"'))
             console.log(b.GetById('dxrdp-surface'))
             console.log(b.GetById('dxrd-right-panel-template-base'))
        }

        function onBeforeRender(s, e) {
            console.log(""Eeeeeeeeeeee"",e)
            
            var pages = e.reportPreview.pages;

            console.log(""pages"", pages)
            //Subscribe to property change. 
            
        }

        var r1;
        var r2;

        function ConfigureBeforeRender(s, e ) { 
            //AsyncExportApproach(true); 
            console.log("" var pages = e.reportPreview.pages;"", e.reportPreview.pages());

            var pages = e.reportPreview.pages;
            //Subscribe to property change. 
            var pagesSubscription = pages.subscribe(function (newValue) {
                if (newValue.length > 0) {

                    console.log( ""newValue"", newValue)
                    //$(""#loader"").dialog(""close"");
                    ////Stop tracking changes.
                    //page");
            WriteLiteral(@"sSubscription.dispose();
                }
            });

            console.log(""pagesSubscription"", pagesSubscription);
            r1 = e;
            r2 = pagesSubscription;
 
        }

        function printer() {

            console.log(r1);
            console.log(r2);

            r1.Print(r2);

        }
 
    </script>

    <div class=""row"">
       
        <div class=""col-lg-2 col-md-2 col-sm-2 col-xs-12 pad"">
           
            <button type=""button"" class=""btn btn-dark"" onclick=""printer();"" tyle=""float: right;"">Print Now...</button>
        </div>

    </div>
    ");
            EndContext();
            BeginContext(3026, 285, false);
            Write(
#line 96 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\Shared\_Report.cshtml"
     Html.DevExpress().WebDocumentViewer("DocumentViewer").Height("900px").Bind(Model).ClientSideEvents(x => { x.CustomizeMenuActions("InitDevExWebDocumentViewer"); x.CustomizeExportOptions("CustomizeExportOptions"); x.CustomizeElements("asad");  x.BeforeRender("ConfigureBeforeRender"); })

#line default
#line hidden
            );
            EndContext();
            BeginContext(3311, 545, true);
            WriteLiteral(@"

<!--<div class=""row"">
    <div class=""col-lg-10 col-md-10 col-sm-2 col-xs-12 pad"">
        <label class=""checkbox"">
            <input type=""checkbox"" id=""useDefaultPrinter"" /> <strong>Print to Default printer</strong>
        </label>
        <div id=""installedPrinters"">
            <label for=""installedPrinterName"">Select an installed Printer:</label>
            <select name=""installedPrinterName"" id=""installedPrinterName""></select>
        </div>
    </div>

    <div class=""col-lg-2 col-md-2 col-sm-2 col-xs-12 pad"">-->
");
            EndContext();
            BeginContext(3974, 3105, true);
            WriteLiteral(@"        <!--<button type=""button"" class=""btn btn-dark"" onclick=""printer();"" tyle=""float: right;"">Print Now...</button>
    </div>

</div>
    <script>

        //WebSocket settings
        JSPM.JSPrintManager.auto_reconnect = true;
        JSPM.JSPrintManager.start();
        JSPM.JSPrintManager.WS.onStatusChanged = function () {
            if (jspmWSStatus()) {
                //get client installed printers
                JSPM.JSPrintManager.getPrinters().then(function (myPrinters) {

                    console.log(""myPrinters"", myPrinters)
                    var options = '';
                    for (var i = 0; i < myPrinters.length; i++) {
                        options += '<option>' + myPrinters[i] + '</option>';
                    }
                    $('#installedPrinterName').html(options);
                });
            }
        };

        //Check JSPM WebSocket status
        function jspmWSStatus() {
            if (JSPM.JSPrintManager.websocket_status == JSPM.WS");
            WriteLiteral(@"Status.Open)
                return true;
            else if (JSPM.JSPrintManager.websocket_status == JSPM.WSStatus.Closed) {
                alert('JSPrintManager (JSPM) is not installed or not running! Download JSPM Client App from https://neodynamic.com/downloads/jspm');
                return false;
            }
            else if (JSPM.JSPrintManager.websocket_status == JSPM.WSStatus.Blocked) {
                alert('JSPM has blocked this website!');
                return false;
            }
        }

        //Do printing...
        function print(o) {

            if (jspmWSStatus()) {
 


                //generate an image of HTML content through html2canvas utility
                html2canvas(document.getElementsByClassName('dxrd-report-preview-content-loading-wrapper'), { scale: 5 }).then(function (canvas) {

                    console.log(""canvas"", canvas)
                    //Create a ClientPrintJob
                    var cpj = new JSPM.ClientPrintJob();
         ");
            WriteLiteral(@"           //Set Printer type (Refer to the help, there many of them!)
                    if ($('#useDefaultPrinter').prop('checked')) {
                        cpj.clientPrinter = new JSPM.DefaultPrinter();
                    } else {
                        cpj.clientPrinter = new JSPM.InstalledPrinter($('#installedPrinterName').val());
                    }
                    //Set content to print...
                    var b64Prefix = ""data:image/png;base64,"";
                    var imgBase64DataUri = canvas.toDataURL(""image/png"");
                    var imgBase64Content = imgBase64DataUri.substring(b64Prefix.length, imgBase64DataUri.length);

                    var myImageFile = new JSPM.PrintFile(imgBase64Content, JSPM.FileSourceType.Base64, 'myFileToPrint.png', 1);
                    //add file to print job
                    cpj.files.push(myImageFile);

                    //Send print job to printer!
                    cpj.sendToClient();

                });
           ");
            WriteLiteral(" }\r\n\r\n        }\r\n    </script>-->");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DevExpress.XtraReports.UI.XtraReport> Html { get; private set; }
    }
}
#pragma warning restore 1591

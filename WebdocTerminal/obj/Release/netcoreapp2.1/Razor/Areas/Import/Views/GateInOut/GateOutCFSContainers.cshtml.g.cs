#pragma checksum "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\Views\GateInOut\GateOutCFSContainers.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "3c3755e78466aade0a7f70aa31c6e47481ac6c3e242a0612a0757999508239c6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Import_Views_GateInOut_GateOutCFSContainers), @"mvc.1.0.view", @"/Areas/Import/Views/GateInOut/GateOutCFSContainers.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Import/Views/GateInOut/GateOutCFSContainers.cshtml", typeof(AspNetCore.Areas_Import_Views_GateInOut_GateOutCFSContainers))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal

    ;
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using WebdocTerminal.Models

    ;
#line 4 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

    ;
#line 5 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Areas\Import\_ViewImports.cshtml"
using DevExpress.AspNetCore

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"3c3755e78466aade0a7f70aa31c6e47481ac6c3e242a0612a0757999508239c6", @"/Areas/Import/Views/GateInOut/GateOutCFSContainers.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"d9c22d530c8a142b4db368d33b9ab0d7e8720da4515d4bce483967cecc7394c6", @"/Areas/Import/_ViewImports.cshtml")]
    public class Areas_Import_Views_GateInOut_GateOutCFSContainers : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/app.js/GateOutCFSContainers.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 175, true);
            WriteLiteral("\r\n\r\n<style>\r\n    #gateoutContainer {\r\n        max-height: 700px;\r\n    }\r\n\r\n    .modal-dialog {\r\n        width: 50% !important;\r\n        margin: 30px auto;\r\n    }\r\n</style>\r\n\r\n");
            EndContext();
            BeginContext(175, 59, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3c3755e78466aade0a7f70aa31c6e47481ac6c3e242a0612a0757999508239c64377", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(234, 9421, true);
            WriteLiteral(@"

<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""title_left"">
            <h3>
                Gate Out CFS
            </h3>
        </div>
        <div class=""title_right"">
        </div>
    </div>
    <div class=""clearfix""></div>

    <div class=""row"">

        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"">
                    <div id=""gateoutContainer""></div>
                    <div class=""ln_solid""></div>
                    <div class=""form-group"">
                        <div class=""col-md-12 col-sm-12 col-xs-12"">
                            <button class=""btn btn-primary"" style=""float:right;"" id=""btnSubmit"" onclick=""gateOutCFS()"">Save & create</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>


    <div id=""HoldStatusModal"" class=""modal fade"" role=""dialog"">
        <div cl");
            WriteLiteral(@"ass=""modal-dialog"">
            <!-- Modal content-->
            <div class=""modal-content"">
                <div class=""modal-header"">
                    <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                    <h4 class=""modal-title"">Hold Status</h4>
                </div>
                <div class=""modal-body"">
                    <div class=""row"">
                        <div class=""col-md-12 col-sm-12 col-xs-12"">
                            <div class=""x_panel"">
                                <div class=""x_content"">
                                    <div class=""x_content"" id=""holdGrid""></div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

            </div>

        </div>
    </div>

</div>


<!--<script>

    var grid;

    var onOptionChanged = function (e) {
        console.log(e);
    };

    var containers = [];");
            WriteLiteral(@"

    var shippingAgents = [];

    //$(function () {

    //    formfiled();

    //});



    function checkColumn(e, field) {

        if (e.parentType === ""dataRow"" && e.dataField !== field) {
            return;
        }

        e.editorOptions.disabled = true;
    }

    function hideMenifestedColumns(e) {

        checkColumn(e, ""blNo"");
        checkColumn(e, ""virNo"");
        checkColumn(e, ""noOfPackages"");
        checkColumn(e, ""indexNo"");

        if (PermissionInputs.find(x => x.fieldName == ""IsGateOut"" && x.isChecked == false)) {

            checkColumn(e, ""isGateOut"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""ShiftedYard"" && x.isChecked == false)) {

            checkColumn(e, ""shiftedYard"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""ShippingAgentId"" && x.isChecked == false)) {

            checkColumn(e, ""shippingAgentId"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""BondedCarrierNTN"" ");
            WriteLiteral(@"&& x.isChecked == false)) {

            checkColumn(e, ""bondedCarrierNTN"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""TruckNo"" && x.isChecked == false)) {

            checkColumn(e, ""truckNo"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""GateOutTime"" && x.isChecked == false)) {

            checkColumn(e, ""gateOutTime"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""Status"" && x.isChecked == false)) {

            checkColumn(e, ""status"");
        }
        if (PermissionInputs.find(x => x.fieldName == ""PackageType"" && x.isChecked == false)) {

            checkColumn(e, ""packageType"");
        }
     }

    function showToast(message, icon) {

        $.toast({
            heading: message,
            showHideTransition: 'slide',
            position: 'bottom-right',
            icon: icon
        });
    }

    function loadGrid(dataSource) {

        $.get('/APICalls/GetGateOutCFSIndexes', function (data) {");
            WriteLiteral(@"
             if (dataSource)
                containers = dataSource

            else
                containers = data;

            $.get('/APICalls/GetShippingAgents', function (agents) {
                console.log(containers)
                shippingAgents = agents;

                var dataGrid = $(""#gateoutContainer"").dxDataGrid({
                    dataSource: containers,
                    keyExpr: ""key"",

                    wordWrapEnabled: true,
                    showBorders: true,
                    showBorders: true,
                    allowColumnResizing: true,
                    columnAutoWidth: true,
                    dateSerializationFormat: ""yyyy/MM/dd HH:mm:ss"",
                    paging: {
                        pageSize: 10
                    },

                    searchPanel: {
                        visible: true,
                        width: 240,
                        placeholder: ""Search...""

                    },

                ");
            WriteLiteral(@"    editing: {

                        allowUpdating: true,
                        selectTextOnEditStart: true,
                        startEditAction: ""click"",
                        mode: ""cell""
                    },
                    columns: [
                        ""virNo"",
                        {
                            dataField: ""blNo"",
                            caption: ""BL No"",
                            width : 120
                        },
                        ""indexNo"",

                        ""noOfPackages"",
                        ""packageType"",
                        {
                            dataField: ""status"",
                            caption: ""Status"",
                            //lookup: {
                            //    dataSource: [{ status: ""F"" }, { status: ""E"" }],
                            //    displayExpr: ""status"",
                            //    valueExpr: ""status""
                            //}
                      ");
            WriteLiteral(@"  },
                        {
                            dataField: ""gateOutTime"",
                            caption: ""Out Time"",
                            dataType: 'date',
                            format: 'dd/MM/yyyy',
                            width : 100
                        },
                        //{
                        //    dataField: ""truckNo"",
                        //    caption: ""Truck No"",
                        //},
                        //""bondedCarrierNTN"",
                        {
                            dataField: ""shippingAgentId"",
                            caption: ""Agent"",
                            width: 200,
                            lookup: {
                                dataSource: shippingAgents,
                                displayExpr: ""name"",
                                valueExpr: ""shippingAgentId""
                            }
                        },
                        //""shiftedYard"",
                 ");
            WriteLiteral(@"       //{
                        //    caption: """",
                        //    dataField: ""isGateOut"",
                        //    dataType: ""boolean""
                        //}
                    ],
                    onEditorPreparing: function (e) {
                        console.log(e);
                        hideMenifestedColumns(e);
                    },
                    onRowUpdated: function (e) {

                    }

                }).dxDataGrid(""instance"");

                $('.dx-datagrid-search-panel').removeClass('dx-state-disabled');
                $('div.dx-texteditor-input-container > input.dx-texteditor-input').removeAttr('disabled');


            })


        });
    }


    //function gateOutCFS() {

    //    $(this).children('#btnSubmit').prop('disabled', true);

    //    setTimeout(function () { $(""#btnSubmit"").attr(""disabled"", false); }, 120000);

    //    var gateOtCFS = containers.filter(c => c.isGateOut == true);

    //    $");
            WriteLiteral(@".post('AddGetOutCFS', { model: gateOtCFS }, function (data) {
    //        console.log('1');
    //        if (data.error == true) {
    //            console.log('2');
    //            showToast(data.message, ""error"");
    //        }
    //        else {
    //            console.log('3');
    //            showToast(""Gate Out CFS Created"", ""success"");

    //            loadGrid(containers.filter(c => c.isGateOut == false));
    //        }
    //    });
    //}


    function formfiled() {
        loadGrid();
    }


</script>


<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""title_left"">
            <h3>
                Index Gate Out
            </h3>
        </div>
        <div class=""title_right"">
        </div>
    </div>
    <div class=""clearfix""></div>

    <div class=""row"">

        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"">
                  ");
            WriteLiteral("  <div id=\"gateoutContainer\"></div>\r\n                    <div class=\"ln_solid\"></div>\r\n                    <div class=\"form-group\">\r\n                        <div class=\"col-md-12 col-sm-12 col-xs-12\">-->\r\n");
            EndContext();
            BeginContext(9778, 127, true);
            WriteLiteral("<!--</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>-->\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591

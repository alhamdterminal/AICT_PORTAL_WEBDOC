#pragma checksum "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\Permissions\Index.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "5c2d57a60d4e3615a882c8f9c0854981d752e5a8aa561b26a57030dd65e2f900"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Permissions_Index), @"mvc.1.0.view", @"/Views/Permissions/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Permissions/Index.cshtml", typeof(AspNetCore.Views_Permissions_Index))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\_ViewImports.cshtml"
using WebdocTerminal

    ;
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\_ViewImports.cshtml"
using WebdocTerminal.Models

    ;
#line 4 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

    ;
#line 5 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"5c2d57a60d4e3615a882c8f9c0854981d752e5a8aa561b26a57030dd65e2f900", @"/Views/Permissions/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"d9c22d530c8a142b4db368d33b9ab0d7e8720da4515d4bce483967cecc7394c6", @"/Views/_ViewImports.cshtml")]
    public class Views_Permissions_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<WebdocTerminal.Models.UserViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\Permissions\Index.cshtml"
  
    var roles = (List<SelectListItem>)ViewData["Roles"];

#line default
#line hidden

            BeginContext(109, 9199, true);
            WriteLiteral(@"
<script>
    const itemsList = [
        ""Select All"", ""Account Reports"", ""CFS & CY Reports"", ""CFS Reports"", ""CSD"", ""CSD Reports"", ""Account Reports"", ""Finance"", ""Finance Reports"", ""Forms Reports"", ""IT"", ""Operation Reports"", ""Operations"", ""TP Reports""
    ];

    var mydata = [];
    // $(function () {
    //    onrolechage();
    // })

    var role;

    function onrolechage() {

        role = $('#roles').find("":selected"").text();

        $.get('/Permissions/PermissionsPartial?Role=' + role, function (resp) {

            selectAll(resp)

            //$(""#permissions-container"").html(resp);

        });

    }
    function selectAll(value) {

        mydata = value
 

         var dataGrid,
            changedBySelectBox;
        
        console.log(""mydata"", mydata)
        var dataGrid = $(""#gridContainer"").dxDataGrid({
            dataSource: mydata,
              keyExpr: ""appPageId"",
            allowColumnReordering: true,
            showBorders: true,
    ");
            WriteLiteral(@"      columnAutoWidth: true,
                    allowColumnResizing: true,
        grouping: {
            autoExpandAll: false,
        },
       
        paging: {
            pageSize: 20
        },  
        groupPanel: {
            visible: true
            },
            
            headerFilter: {
                visible: true
            },

            editing: {
                mode: ""batch"",
                allowUpdating: true 
                
            },
            columns: [
                ""pageName"",


                {
                    caption: ""Create"",
                    dataField: ""create"",
                    dataType: ""boolean""
                },
                {
                    caption: ""Update"",
                    dataField: ""update"",
                    dataType: ""boolean""
                },
                {
                    caption: ""Read"",
                    dataField: ""read"",
                    dataType: ""boolean""
     ");
            WriteLiteral(@"           },
                {
                    dataField: ""pageType"",
                    groupIndex: 0
                }
            ],


            masterDetail: {
            enabled: true,
                template: function (container, options) { 
                 console.log(container)
                    console.log(options)
                    if (options.data.pageItem) {
                        var mydata2 = options.data.pageItem;
                    
                    if (mydata2) {
                        console.log(mydata2)
                    }
                    }
                    

                $(""<div>"")
                    .dxDataGrid({
                         columnAutoWidth: true,
                    showBorders: true,
                filterRow: {
                visible: true,
                applyFilter: ""auto""
                },
                headerFilter: {
                visible: true
                        }, 
                 editi");
            WriteLiteral(@"ng: {
                mode: ""batch"",
                allowUpdating: true 
                
            },
                        columns: [""fieldName"", {
                            dataField: ""isChecked"",
                              dataType: ""boolean""
                        } ],
                        dataSource: new DevExpress.data.DataSource({
                            store: new DevExpress.data.ArrayStore({
                                key: ""appPageItemId"",
                                data: mydata2
                            }),
                       
                        })
                    }).appendTo(container);
            }
        },
             onEditorPreparing: function (e) {
                        hideMenifestedColumns(e);
                    },
            onSelectionChanged: function (selecteditems) {
                    console.log( selecteditems)
 
                selecteditems.component._options.dataSource.filter(t => {
                    ");
            WriteLiteral(@"t.create = false,
                        t.read = false,
                        t.update = false

                });
                 

                console.log( selecteditems)

                 selecteditems.selectedRowsData.filter(t => {
                    t.create = true,
                        t.read = true,
                        t.update = true
                          
                 })
               
        }



        }).dxDataGrid(""instance"");

        // $(""#select-prefix"").dxSelectBox({
        //     dataSource: [""Select All"", ""Account Reports"", ""CFS & CY Reports"", ""CFS Reports"", ""CSD"", ""CSD Reports"", ""Account Reports"", ""Finance"", ""Finance Reports"", ""Forms Reports"", ""IT"", ""Operation Reports"", ""Operations"", ""TP Reports""  ],
        //placeholder: ""Select title"",
        //onValueChanged: function (data) {

        //    console.log(""data.value"", data)

        //    if(!data.value)
        //        return;
        //    changedBySelectBox = true;
   ");
            WriteLiteral(@"     //    if (data.value == ""Select All"") {
        //        dataGrid.selectAll();
        //    }
       
        //    else { 
        //        var list = $.map($.grep(dataGrid.option(""dataSource""), function (item) {
                    
                       
        //            return item.pageType === data.value;
        //        }), function(item) {
        //            return item.appPageId
        //        });

        //        console.log(""list"", list);
        //      dataGrid.selectRows(list)
                 
            
                
        //    }
        //}
        // });


        $('#select-prefix').dxTagBox({
            items: itemsList,
            onValueChanged: function (data) {
                console.log(""data.value"", data)


                if (data.value.length) {
                    console.log(""1"")
                    if (data.value.includes(""Select All"")) {
                        dataGrid.selectAll();
                        conso");
            WriteLiteral(@"le.log(""2"")
                    }
                    else {
                        console.log(""3"")
                        var listdata = [];
                        data.value.forEach(c => {

                            var list = $.map($.grep(dataGrid.option(""dataSource""), function (item) {


                                return item.pageType === c;
                            }), function (item) {
                                return item.appPageId
                            });

                            console.log(""list"", list);

                            listdata.push(...list)
                        });

                        console.log(""listdata"", listdata);

                        dataGrid.selectRows(listdata)
                    }

                }
                else {
                    console.log(""4"")
                    dataGrid.selectRows([])
                }


            //if(!data.value.length)
            // return;
            //chang");
            WriteLiteral(@"edBySelectBox = true;
            //    if (data.value.includes(""Select All"")) {
            //        dataGrid.selectAll();
            //    }
            //    else {


            //    }

            }
        });

      

    }

    
    function checkColumn(e, field) {

        if (e.parentType === ""dataRow"" && e.dataField !== field) {

            return;
        }

        e.editorOptions.disabled = true;
    }

    function hideMenifestedColumns(e) {

        checkColumn(e, ""pageName""); 
    }



    function savePermissions() {
        
        var pms = mydata
 
       
        $.post('/permissions/AddPermissions', { pms: pms, role: role }, function (res) {
            console.log(res)
            if (res.error == true) {
                    showToast(res.message, ""error"");


                }
                else {
                    showToast(res.message, ""success"");
                    $(""#btnSubmit"").attr(""disabled"", true);
                    ");
            WriteLiteral(@" location.reload();
                }

        })
    }

        function showToast(message, icon) {

        $.toast({
            heading: message,
            showHideTransition: 'slide',
            position: 'bottom-right',
            icon: icon
        });
    }
         function formfiled() {

    }


   
</script>


<div class=""right_col"" role=""main"">
    <div class=""page-title"">
        <div class=""title_left"">
            <h3>Permissions</h3>
        </div>

    </div>

    <div class=""row"">
        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"">

                    <div class=""form-group"">
                        <label class=""control-label col-md-1 col-sm-1 col-xs-12"" for=""first-name"">
                            Roles <span class=""required"">*</span>
                        </label>
                        <div class=""col-md-4 col-xs-12"">
                            ");
            EndContext();
            BeginContext(9309, 134, false);
            Write(
#line 335 "D:\AICT_GIT_PROJECTS\WebDoc\WebdocTerminal\Views\Permissions\Index.cshtml"
                             Html.DropDownList("Name", roles, "Select Role", new { @class = "form-control", @id = "roles", @onchange = "onrolechage(this.value)" })

#line default
#line hidden
            );
            EndContext();
            BeginContext(9443, 1221, true);
            WriteLiteral(@"
                            
                        </div>
                    </div>   
                     

                </div>
            </div>
        </div>
    </div>

    <div class=""row"">
        <div class=""col-md-12 col-sm-12 col-xs-12"">
            <div class=""x_panel"">

                <div class=""x_content"">
                    <div class=""row"">
                        <div class=""col-md-4 col-sm-4 col-xs-12"">

                            <div class=""form-group"">
                                
                                <div class=""col-md-12 col-xs-12"">
                                    <div id=""select-prefix""></div>

                                </div>
                            </div>



                        </div>
                    </div>

                   

                    <div id=""gridContainer"">
                    </div>
                    <button class=""btn btn-primary"" id=""btnSubmit"" onclick=""savePermissions()"">save pe");
            WriteLiteral("rmission</button>\r\n                     \r\n\r\n                </div>\r\n                    </div>\r\n                </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n<script>\r\n    $(\'.select2\').select2();\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WebdocTerminal.Models.UserViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
